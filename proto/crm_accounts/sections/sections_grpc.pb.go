// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.20.3
// source: proto/sections.proto

package sections

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SectionsService_GetById_FullMethodName = "/proto.SectionsService/GetById"
	SectionsService_Create_FullMethodName  = "/proto.SectionsService/Create"
	SectionsService_Update_FullMethodName  = "/proto.SectionsService/Update"
	SectionsService_Delete_FullMethodName  = "/proto.SectionsService/Delete"
	SectionsService_GetList_FullMethodName = "/proto.SectionsService/GetList"
)

// SectionsServiceClient is the client API for SectionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SectionsServiceClient interface {
	GetById(ctx context.Context, in *SectionsId, opts ...grpc.CallOption) (*Section, error)
	Create(ctx context.Context, in *Section, opts ...grpc.CallOption) (*SectionsId, error)
	Update(ctx context.Context, in *Section, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *SectionsId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SectionList, error)
}

type sectionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSectionsServiceClient(cc grpc.ClientConnInterface) SectionsServiceClient {
	return &sectionsServiceClient{cc}
}

func (c *sectionsServiceClient) GetById(ctx context.Context, in *SectionsId, opts ...grpc.CallOption) (*Section, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Section)
	err := c.cc.Invoke(ctx, SectionsService_GetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sectionsServiceClient) Create(ctx context.Context, in *Section, opts ...grpc.CallOption) (*SectionsId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SectionsId)
	err := c.cc.Invoke(ctx, SectionsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sectionsServiceClient) Update(ctx context.Context, in *Section, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SectionsService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sectionsServiceClient) Delete(ctx context.Context, in *SectionsId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SectionsService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sectionsServiceClient) GetList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SectionList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SectionList)
	err := c.cc.Invoke(ctx, SectionsService_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SectionsServiceServer is the server API for SectionsService service.
// All implementations should embed UnimplementedSectionsServiceServer
// for forward compatibility
type SectionsServiceServer interface {
	GetById(context.Context, *SectionsId) (*Section, error)
	Create(context.Context, *Section) (*SectionsId, error)
	Update(context.Context, *Section) (*emptypb.Empty, error)
	Delete(context.Context, *SectionsId) (*emptypb.Empty, error)
	GetList(context.Context, *emptypb.Empty) (*SectionList, error)
}

// UnimplementedSectionsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSectionsServiceServer struct {
}

func (UnimplementedSectionsServiceServer) GetById(context.Context, *SectionsId) (*Section, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedSectionsServiceServer) Create(context.Context, *Section) (*SectionsId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSectionsServiceServer) Update(context.Context, *Section) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSectionsServiceServer) Delete(context.Context, *SectionsId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSectionsServiceServer) GetList(context.Context, *emptypb.Empty) (*SectionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}

// UnsafeSectionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SectionsServiceServer will
// result in compilation errors.
type UnsafeSectionsServiceServer interface {
	mustEmbedUnimplementedSectionsServiceServer()
}

func RegisterSectionsServiceServer(s grpc.ServiceRegistrar, srv SectionsServiceServer) {
	s.RegisterService(&SectionsService_ServiceDesc, srv)
}

func _SectionsService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectionsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionsServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SectionsService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionsServiceServer).GetById(ctx, req.(*SectionsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SectionsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Section)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SectionsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionsServiceServer).Create(ctx, req.(*Section))
	}
	return interceptor(ctx, in, info, handler)
}

func _SectionsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Section)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SectionsService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionsServiceServer).Update(ctx, req.(*Section))
	}
	return interceptor(ctx, in, info, handler)
}

func _SectionsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectionsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SectionsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionsServiceServer).Delete(ctx, req.(*SectionsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SectionsService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectionsServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SectionsService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectionsServiceServer).GetList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SectionsService_ServiceDesc is the grpc.ServiceDesc for SectionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SectionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SectionsService",
	HandlerType: (*SectionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _SectionsService_GetById_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SectionsService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SectionsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SectionsService_Delete_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _SectionsService_GetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sections.proto",
}
