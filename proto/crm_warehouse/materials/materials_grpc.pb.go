// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.20.3
// source: proto/materials/materials.proto

package materials

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MaterialService_CreatePlanning_FullMethodName          = "/materials.MaterialService/CreatePlanning"
	MaterialService_UpdatePlanning_FullMethodName          = "/materials.MaterialService/UpdatePlanning"
	MaterialService_DeletePlanning_FullMethodName          = "/materials.MaterialService/DeletePlanning"
	MaterialService_GetPlanning_FullMethodName             = "/materials.MaterialService/GetPlanning"
	MaterialService_GetListPlanning_FullMethodName         = "/materials.MaterialService/GetListPlanning"
	MaterialService_MovePlanningToPurchased_FullMethodName = "/materials.MaterialService/MovePlanningToPurchased"
	MaterialService_CreatePurchased_FullMethodName         = "/materials.MaterialService/CreatePurchased"
	MaterialService_UpdatePurchased_FullMethodName         = "/materials.MaterialService/UpdatePurchased"
	MaterialService_DeletePurchased_FullMethodName         = "/materials.MaterialService/DeletePurchased"
	MaterialService_GetPurchased_FullMethodName            = "/materials.MaterialService/GetPurchased"
	MaterialService_GetListPurchased_FullMethodName        = "/materials.MaterialService/GetListPurchased"
	MaterialService_MovePurchasedToArchive_FullMethodName  = "/materials.MaterialService/MovePurchasedToArchive"
	MaterialService_GetPlanningArchive_FullMethodName      = "/materials.MaterialService/GetPlanningArchive"
	MaterialService_GetPurchasedArchive_FullMethodName     = "/materials.MaterialService/GetPurchasedArchive"
	MaterialService_GetListPlanningArchive_FullMethodName  = "/materials.MaterialService/GetListPlanningArchive"
	MaterialService_GetListPurchasedArchive_FullMethodName = "/materials.MaterialService/GetListPurchasedArchive"
	MaterialService_DeletePlanningArchive_FullMethodName   = "/materials.MaterialService/DeletePlanningArchive"
	MaterialService_DeletePurchasedArchive_FullMethodName  = "/materials.MaterialService/DeletePurchasedArchive"
)

// MaterialServiceClient is the client API for MaterialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaterialServiceClient interface {
	CreatePlanning(ctx context.Context, in *Material, opts ...grpc.CallOption) (*MaterialId, error)
	UpdatePlanning(ctx context.Context, in *Material, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePlanning(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPlanning(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*Material, error)
	GetListPlanning(ctx context.Context, in *MaterialParams, opts ...grpc.CallOption) (*MaterialList, error)
	MovePlanningToPurchased(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*MaterialId, error)
	CreatePurchased(ctx context.Context, in *Material, opts ...grpc.CallOption) (*MaterialId, error)
	UpdatePurchased(ctx context.Context, in *Material, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePurchased(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPurchased(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*Material, error)
	GetListPurchased(ctx context.Context, in *MaterialParams, opts ...grpc.CallOption) (*MaterialList, error)
	MovePurchasedToArchive(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPlanningArchive(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*Material, error)
	GetPurchasedArchive(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*Material, error)
	GetListPlanningArchive(ctx context.Context, in *MaterialParams, opts ...grpc.CallOption) (*MaterialList, error)
	GetListPurchasedArchive(ctx context.Context, in *MaterialParams, opts ...grpc.CallOption) (*MaterialList, error)
	DeletePlanningArchive(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePurchasedArchive(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type materialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaterialServiceClient(cc grpc.ClientConnInterface) MaterialServiceClient {
	return &materialServiceClient{cc}
}

func (c *materialServiceClient) CreatePlanning(ctx context.Context, in *Material, opts ...grpc.CallOption) (*MaterialId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaterialId)
	err := c.cc.Invoke(ctx, MaterialService_CreatePlanning_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) UpdatePlanning(ctx context.Context, in *Material, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MaterialService_UpdatePlanning_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) DeletePlanning(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MaterialService_DeletePlanning_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) GetPlanning(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*Material, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Material)
	err := c.cc.Invoke(ctx, MaterialService_GetPlanning_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) GetListPlanning(ctx context.Context, in *MaterialParams, opts ...grpc.CallOption) (*MaterialList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaterialList)
	err := c.cc.Invoke(ctx, MaterialService_GetListPlanning_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) MovePlanningToPurchased(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*MaterialId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaterialId)
	err := c.cc.Invoke(ctx, MaterialService_MovePlanningToPurchased_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) CreatePurchased(ctx context.Context, in *Material, opts ...grpc.CallOption) (*MaterialId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaterialId)
	err := c.cc.Invoke(ctx, MaterialService_CreatePurchased_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) UpdatePurchased(ctx context.Context, in *Material, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MaterialService_UpdatePurchased_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) DeletePurchased(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MaterialService_DeletePurchased_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) GetPurchased(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*Material, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Material)
	err := c.cc.Invoke(ctx, MaterialService_GetPurchased_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) GetListPurchased(ctx context.Context, in *MaterialParams, opts ...grpc.CallOption) (*MaterialList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaterialList)
	err := c.cc.Invoke(ctx, MaterialService_GetListPurchased_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) MovePurchasedToArchive(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MaterialService_MovePurchasedToArchive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) GetPlanningArchive(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*Material, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Material)
	err := c.cc.Invoke(ctx, MaterialService_GetPlanningArchive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) GetPurchasedArchive(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*Material, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Material)
	err := c.cc.Invoke(ctx, MaterialService_GetPurchasedArchive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) GetListPlanningArchive(ctx context.Context, in *MaterialParams, opts ...grpc.CallOption) (*MaterialList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaterialList)
	err := c.cc.Invoke(ctx, MaterialService_GetListPlanningArchive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) GetListPurchasedArchive(ctx context.Context, in *MaterialParams, opts ...grpc.CallOption) (*MaterialList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaterialList)
	err := c.cc.Invoke(ctx, MaterialService_GetListPurchasedArchive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) DeletePlanningArchive(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MaterialService_DeletePlanningArchive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialServiceClient) DeletePurchasedArchive(ctx context.Context, in *MaterialId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MaterialService_DeletePurchasedArchive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaterialServiceServer is the server API for MaterialService service.
// All implementations should embed UnimplementedMaterialServiceServer
// for forward compatibility
type MaterialServiceServer interface {
	CreatePlanning(context.Context, *Material) (*MaterialId, error)
	UpdatePlanning(context.Context, *Material) (*emptypb.Empty, error)
	DeletePlanning(context.Context, *MaterialId) (*emptypb.Empty, error)
	GetPlanning(context.Context, *MaterialId) (*Material, error)
	GetListPlanning(context.Context, *MaterialParams) (*MaterialList, error)
	MovePlanningToPurchased(context.Context, *MaterialId) (*MaterialId, error)
	CreatePurchased(context.Context, *Material) (*MaterialId, error)
	UpdatePurchased(context.Context, *Material) (*emptypb.Empty, error)
	DeletePurchased(context.Context, *MaterialId) (*emptypb.Empty, error)
	GetPurchased(context.Context, *MaterialId) (*Material, error)
	GetListPurchased(context.Context, *MaterialParams) (*MaterialList, error)
	MovePurchasedToArchive(context.Context, *MaterialId) (*emptypb.Empty, error)
	GetPlanningArchive(context.Context, *MaterialId) (*Material, error)
	GetPurchasedArchive(context.Context, *MaterialId) (*Material, error)
	GetListPlanningArchive(context.Context, *MaterialParams) (*MaterialList, error)
	GetListPurchasedArchive(context.Context, *MaterialParams) (*MaterialList, error)
	DeletePlanningArchive(context.Context, *MaterialId) (*emptypb.Empty, error)
	DeletePurchasedArchive(context.Context, *MaterialId) (*emptypb.Empty, error)
}

// UnimplementedMaterialServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMaterialServiceServer struct {
}

func (UnimplementedMaterialServiceServer) CreatePlanning(context.Context, *Material) (*MaterialId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlanning not implemented")
}
func (UnimplementedMaterialServiceServer) UpdatePlanning(context.Context, *Material) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlanning not implemented")
}
func (UnimplementedMaterialServiceServer) DeletePlanning(context.Context, *MaterialId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlanning not implemented")
}
func (UnimplementedMaterialServiceServer) GetPlanning(context.Context, *MaterialId) (*Material, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanning not implemented")
}
func (UnimplementedMaterialServiceServer) GetListPlanning(context.Context, *MaterialParams) (*MaterialList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListPlanning not implemented")
}
func (UnimplementedMaterialServiceServer) MovePlanningToPurchased(context.Context, *MaterialId) (*MaterialId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovePlanningToPurchased not implemented")
}
func (UnimplementedMaterialServiceServer) CreatePurchased(context.Context, *Material) (*MaterialId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePurchased not implemented")
}
func (UnimplementedMaterialServiceServer) UpdatePurchased(context.Context, *Material) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePurchased not implemented")
}
func (UnimplementedMaterialServiceServer) DeletePurchased(context.Context, *MaterialId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePurchased not implemented")
}
func (UnimplementedMaterialServiceServer) GetPurchased(context.Context, *MaterialId) (*Material, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchased not implemented")
}
func (UnimplementedMaterialServiceServer) GetListPurchased(context.Context, *MaterialParams) (*MaterialList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListPurchased not implemented")
}
func (UnimplementedMaterialServiceServer) MovePurchasedToArchive(context.Context, *MaterialId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovePurchasedToArchive not implemented")
}
func (UnimplementedMaterialServiceServer) GetPlanningArchive(context.Context, *MaterialId) (*Material, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanningArchive not implemented")
}
func (UnimplementedMaterialServiceServer) GetPurchasedArchive(context.Context, *MaterialId) (*Material, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchasedArchive not implemented")
}
func (UnimplementedMaterialServiceServer) GetListPlanningArchive(context.Context, *MaterialParams) (*MaterialList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListPlanningArchive not implemented")
}
func (UnimplementedMaterialServiceServer) GetListPurchasedArchive(context.Context, *MaterialParams) (*MaterialList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListPurchasedArchive not implemented")
}
func (UnimplementedMaterialServiceServer) DeletePlanningArchive(context.Context, *MaterialId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlanningArchive not implemented")
}
func (UnimplementedMaterialServiceServer) DeletePurchasedArchive(context.Context, *MaterialId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePurchasedArchive not implemented")
}

// UnsafeMaterialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaterialServiceServer will
// result in compilation errors.
type UnsafeMaterialServiceServer interface {
	mustEmbedUnimplementedMaterialServiceServer()
}

func RegisterMaterialServiceServer(s grpc.ServiceRegistrar, srv MaterialServiceServer) {
	s.RegisterService(&MaterialService_ServiceDesc, srv)
}

func _MaterialService_CreatePlanning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Material)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).CreatePlanning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_CreatePlanning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).CreatePlanning(ctx, req.(*Material))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_UpdatePlanning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Material)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).UpdatePlanning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_UpdatePlanning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).UpdatePlanning(ctx, req.(*Material))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_DeletePlanning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).DeletePlanning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_DeletePlanning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).DeletePlanning(ctx, req.(*MaterialId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_GetPlanning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).GetPlanning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_GetPlanning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).GetPlanning(ctx, req.(*MaterialId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_GetListPlanning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).GetListPlanning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_GetListPlanning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).GetListPlanning(ctx, req.(*MaterialParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_MovePlanningToPurchased_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).MovePlanningToPurchased(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_MovePlanningToPurchased_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).MovePlanningToPurchased(ctx, req.(*MaterialId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_CreatePurchased_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Material)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).CreatePurchased(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_CreatePurchased_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).CreatePurchased(ctx, req.(*Material))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_UpdatePurchased_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Material)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).UpdatePurchased(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_UpdatePurchased_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).UpdatePurchased(ctx, req.(*Material))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_DeletePurchased_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).DeletePurchased(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_DeletePurchased_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).DeletePurchased(ctx, req.(*MaterialId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_GetPurchased_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).GetPurchased(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_GetPurchased_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).GetPurchased(ctx, req.(*MaterialId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_GetListPurchased_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).GetListPurchased(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_GetListPurchased_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).GetListPurchased(ctx, req.(*MaterialParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_MovePurchasedToArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).MovePurchasedToArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_MovePurchasedToArchive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).MovePurchasedToArchive(ctx, req.(*MaterialId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_GetPlanningArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).GetPlanningArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_GetPlanningArchive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).GetPlanningArchive(ctx, req.(*MaterialId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_GetPurchasedArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).GetPurchasedArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_GetPurchasedArchive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).GetPurchasedArchive(ctx, req.(*MaterialId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_GetListPlanningArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).GetListPlanningArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_GetListPlanningArchive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).GetListPlanningArchive(ctx, req.(*MaterialParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_GetListPurchasedArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).GetListPurchasedArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_GetListPurchasedArchive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).GetListPurchasedArchive(ctx, req.(*MaterialParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_DeletePlanningArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).DeletePlanningArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_DeletePlanningArchive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).DeletePlanningArchive(ctx, req.(*MaterialId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialService_DeletePurchasedArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialServiceServer).DeletePurchasedArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialService_DeletePurchasedArchive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialServiceServer).DeletePurchasedArchive(ctx, req.(*MaterialId))
	}
	return interceptor(ctx, in, info, handler)
}

// MaterialService_ServiceDesc is the grpc.ServiceDesc for MaterialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaterialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "materials.MaterialService",
	HandlerType: (*MaterialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlanning",
			Handler:    _MaterialService_CreatePlanning_Handler,
		},
		{
			MethodName: "UpdatePlanning",
			Handler:    _MaterialService_UpdatePlanning_Handler,
		},
		{
			MethodName: "DeletePlanning",
			Handler:    _MaterialService_DeletePlanning_Handler,
		},
		{
			MethodName: "GetPlanning",
			Handler:    _MaterialService_GetPlanning_Handler,
		},
		{
			MethodName: "GetListPlanning",
			Handler:    _MaterialService_GetListPlanning_Handler,
		},
		{
			MethodName: "MovePlanningToPurchased",
			Handler:    _MaterialService_MovePlanningToPurchased_Handler,
		},
		{
			MethodName: "CreatePurchased",
			Handler:    _MaterialService_CreatePurchased_Handler,
		},
		{
			MethodName: "UpdatePurchased",
			Handler:    _MaterialService_UpdatePurchased_Handler,
		},
		{
			MethodName: "DeletePurchased",
			Handler:    _MaterialService_DeletePurchased_Handler,
		},
		{
			MethodName: "GetPurchased",
			Handler:    _MaterialService_GetPurchased_Handler,
		},
		{
			MethodName: "GetListPurchased",
			Handler:    _MaterialService_GetListPurchased_Handler,
		},
		{
			MethodName: "MovePurchasedToArchive",
			Handler:    _MaterialService_MovePurchasedToArchive_Handler,
		},
		{
			MethodName: "GetPlanningArchive",
			Handler:    _MaterialService_GetPlanningArchive_Handler,
		},
		{
			MethodName: "GetPurchasedArchive",
			Handler:    _MaterialService_GetPurchasedArchive_Handler,
		},
		{
			MethodName: "GetListPlanningArchive",
			Handler:    _MaterialService_GetListPlanningArchive_Handler,
		},
		{
			MethodName: "GetListPurchasedArchive",
			Handler:    _MaterialService_GetListPurchasedArchive_Handler,
		},
		{
			MethodName: "DeletePlanningArchive",
			Handler:    _MaterialService_DeletePlanningArchive_Handler,
		},
		{
			MethodName: "DeletePurchasedArchive",
			Handler:    _MaterialService_DeletePurchasedArchive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/materials/materials.proto",
}
