// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.20.3
// source: proto/warehouse/warehouse.proto

package warehouse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WarehouseService_Create_FullMethodName  = "/warehouse.WarehouseService/Create"
	WarehouseService_GetById_FullMethodName = "/warehouse.WarehouseService/GetById"
	WarehouseService_Update_FullMethodName  = "/warehouse.WarehouseService/Update"
	WarehouseService_Delete_FullMethodName  = "/warehouse.WarehouseService/Delete"
	WarehouseService_GetList_FullMethodName = "/warehouse.WarehouseService/GetList"
)

// WarehouseServiceClient is the client API for WarehouseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarehouseServiceClient interface {
	Create(ctx context.Context, in *Warehouse, opts ...grpc.CallOption) (*WarehouseId, error)
	GetById(ctx context.Context, in *WarehouseId, opts ...grpc.CallOption) (*Warehouse, error)
	Update(ctx context.Context, in *Warehouse, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *WarehouseId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetList(ctx context.Context, in *WarehouseCompanyId, opts ...grpc.CallOption) (*WarehouseList, error)
}

type warehouseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWarehouseServiceClient(cc grpc.ClientConnInterface) WarehouseServiceClient {
	return &warehouseServiceClient{cc}
}

func (c *warehouseServiceClient) Create(ctx context.Context, in *Warehouse, opts ...grpc.CallOption) (*WarehouseId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WarehouseId)
	err := c.cc.Invoke(ctx, WarehouseService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetById(ctx context.Context, in *WarehouseId, opts ...grpc.CallOption) (*Warehouse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Warehouse)
	err := c.cc.Invoke(ctx, WarehouseService_GetById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) Update(ctx context.Context, in *Warehouse, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WarehouseService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) Delete(ctx context.Context, in *WarehouseId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WarehouseService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseServiceClient) GetList(ctx context.Context, in *WarehouseCompanyId, opts ...grpc.CallOption) (*WarehouseList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WarehouseList)
	err := c.cc.Invoke(ctx, WarehouseService_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarehouseServiceServer is the server API for WarehouseService service.
// All implementations should embed UnimplementedWarehouseServiceServer
// for forward compatibility
type WarehouseServiceServer interface {
	Create(context.Context, *Warehouse) (*WarehouseId, error)
	GetById(context.Context, *WarehouseId) (*Warehouse, error)
	Update(context.Context, *Warehouse) (*emptypb.Empty, error)
	Delete(context.Context, *WarehouseId) (*emptypb.Empty, error)
	GetList(context.Context, *WarehouseCompanyId) (*WarehouseList, error)
}

// UnimplementedWarehouseServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWarehouseServiceServer struct {
}

func (UnimplementedWarehouseServiceServer) Create(context.Context, *Warehouse) (*WarehouseId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWarehouseServiceServer) GetById(context.Context, *WarehouseId) (*Warehouse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedWarehouseServiceServer) Update(context.Context, *Warehouse) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWarehouseServiceServer) Delete(context.Context, *WarehouseId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWarehouseServiceServer) GetList(context.Context, *WarehouseCompanyId) (*WarehouseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}

// UnsafeWarehouseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarehouseServiceServer will
// result in compilation errors.
type UnsafeWarehouseServiceServer interface {
	mustEmbedUnimplementedWarehouseServiceServer()
}

func RegisterWarehouseServiceServer(s grpc.ServiceRegistrar, srv WarehouseServiceServer) {
	s.RegisterService(&WarehouseService_ServiceDesc, srv)
}

func _WarehouseService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Warehouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).Create(ctx, req.(*Warehouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarehouseId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetById(ctx, req.(*WarehouseId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Warehouse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).Update(ctx, req.(*Warehouse))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarehouseId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).Delete(ctx, req.(*WarehouseId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarehouseCompanyId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WarehouseService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServiceServer).GetList(ctx, req.(*WarehouseCompanyId))
	}
	return interceptor(ctx, in, info, handler)
}

// WarehouseService_ServiceDesc is the grpc.ServiceDesc for WarehouseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarehouseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "warehouse.WarehouseService",
	HandlerType: (*WarehouseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WarehouseService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _WarehouseService_GetById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WarehouseService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WarehouseService_Delete_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _WarehouseService_GetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/warehouse/warehouse.proto",
}
